//c++ task 2
#include <stdlib.h>
#include <iostream>

struct node_t {
    unsigned v;            // Node value
    struct node_t* next;   // Pointer to the next node
};

// Function to remove even nodes from a list and return a new list of the removed nodes
struct node_t* even_nodes(struct node_t** head) {
    struct node_t* current = *head;  // Current node
    struct node_t* prev = NULL;      // Previous node
    struct node_t* new_head = NULL;  // Head of the new list
    struct node_t* new_tail = NULL;  // Tail of the new list

    // Iterate over the original list
    while (current != NULL) {
        if (current->v % 2 == 0) {  // If the node is even
            // Remove node from the original list
            if (prev != NULL) {
                prev->next = current->next;
            } else {
                *head = current->next;
            }

            // Add node to the new list
            if (new_head == NULL) {
                new_head = current;
            } else {
                new_tail->next = current;
            }
            new_tail = current;
            current = current->next;
            new_tail->next = NULL;
        } else {  // If the node is odd, move to the next node
            prev = current;
            current = current->next;
        }
    }

    return new_head;  // Return the new list
}

int main() {
    // Create nodes
    node_t* node1 = new node_t;
    node1->v = 6;
    node1->next = NULL;

    node_t* node2 = new node_t;
    node2->v = 3;
    node2->next = NULL;

    node_t* node3 = new node_t;
    node3->v = 8;
    node3->next = NULL;

    node_t* node4 = new node_t;
    node4->v = 4;
    node4->next = NULL;

    // Link nodes together to form a list: 6 -> 3 -> 8 -> 4
    node1->next = node2;
    node2->next = node3;
    node3->next = node4;

    // Call even_nodes function
    node_t* head = node1;
    node_t* new_head = even_nodes(&head);

    // Print original list (should contain odd values)
    node_t* temp = head;
    while (temp != NULL) {
        std::cout << temp->v << " ";
        temp = temp->next;
    }
    std::cout << std::endl;

    // Print new list (should contain even values)
    temp = new_head;
    while (temp != NULL) {
        std::cout << temp->v << " ";
        temp = temp->next;
    }
    std::cout << std::endl;

    // Free memory
    delete node1;
    delete node2;
    delete node3;
    delete node4;

    return 0;
}
